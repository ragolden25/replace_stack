[root@webmail mailcow-dockerized]# cat -n mailcow.conf

     1  # ------------------------------

     2  # mailcow web ui configuration

     3  # ------------------------------

     4  # example.org is _not_ a valid hostname, use a fqdn here.

     5  # Default admin user is "admin"

     6  # Default password is "moohoo"

     7

     8  MAILCOW_HOSTNAME=webmail.ccop.dev

     9

    10  # Password hash algorithm

    11  # Only certain password hash algorithm are supported. For a fully list of supported schemes,

    12  # see https://docs.mailcow.email/models/model-passwd/

    13  MAILCOW_PASS_SCHEME=BLF-CRYPT

    14

    15  # ------------------------------

    16  # SQL database configuration

    17  # ------------------------------

    18

    19  DBNAME=mailcow

    20  DBUSER=mailcow

    21

    22  # Please use long, random alphanumeric strings (A-Za-z0-9)

    23

    24  DBPASS=LiUe5xCJSe6i1vX34E9oybN8lKl7

    25  DBROOT=VFxKyAlRrdXjn6kR2P0RggyakeRf

    26

    27  # ------------------------------

    28  # REDIS configuration

    29  # ------------------------------

    30

    31  REDISPASS=MElanWU2TGyIJrxsLKxp3RIKbwUb

    32

    33  # ------------------------------

    34  # HTTP/S Bindings

    35  # ------------------------------

    36

    37  # You should use HTTPS, but in case of SSL offloaded reverse proxies:

    38  # Might be important: This will also change the binding within the container.

    39  # If you use a proxy within Docker, point it to the ports you set below.

    40  # Do _not_ use IP:PORT in HTTP(S)_BIND or HTTP(S)_PORT

    41  # IMPORTANT: Do not use port 8081, 9081, 9082 or 65510!

    42  # Example: HTTP_BIND=1.2.3.4

    43  # For IPv4 leave it as it is: HTTP_BIND= & HTTPS_PORT=

    44  # For IPv6 see https://docs.mailcow.email/post_installation/firststeps-ip_bindings/

    45

    46  HTTP_PORT=80

    47  HTTP_BIND=

    48

    49  HTTPS_PORT=443

    50  HTTPS_BIND=

    51

    52  # Redirect HTTP connections to HTTPS - y/n

    53  HTTP_REDIRECT=n

    54

    55  # ------------------------------

    56  # Other bindings

    57  # ------------------------------

    58  # You should leave that alone

    59  # Format: 11.22.33.44:25 or 12.34.56.78:465 etc.

    60

    61  SMTP_PORT=25

    62  SMTPS_PORT=465

    63  SUBMISSION_PORT=587

    64  IMAP_PORT=143

    65  IMAPS_PORT=993

    66  POP_PORT=110

    67  POPS_PORT=995

    68  SIEVE_PORT=4190

    69  DOVEADM_PORT=127.0.0.1:19991

    70  SQL_PORT=127.0.0.1:13306

    71  REDIS_PORT=127.0.0.1:7654

    72

    73  # Your timezone

    74  # See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones for a list of timezones

    75  # Use the column named 'TZ identifier' + pay attention for the column named 'Notes'

    76

    77  TZ=America/New_York

    78

    79  # Fixed project name

    80  # Please use lowercase letters only

    81

    82  COMPOSE_PROJECT_NAME=mailcowdockerized

    83

    84  # Used Docker Compose version

    85  # Switch here between native (compose plugin) and standalone

    86  # For more informations take a look at the mailcow docs regarding the configuration options.

    87  # Normally this should be untouched but if you decided to use either of those you can switch it manually here.

    88  # Please be aware that at least one of those variants should be installed on your machine or mailcow will fail.

    89

    90  DOCKER_COMPOSE_VERSION=

    91

    92  # Set this to "allow" to enable the anyone pseudo user. Disabled by default.

    93  # When enabled, ACL can be created, that apply to "All authenticated users"

    94  # This should probably only be activated on mail hosts, that are used exclusivly by one organisation.

    95  # Otherwise a user might share data with too many other users.

    96  ACL_ANYONE=disallow

    97

    98  # Garbage collector cleanup

    99  # Deleted domains and mailboxes are moved to /var/vmail/_garbage/timestamp_sanitizedstring

   100  # How long should objects remain in the garbage until they are being deleted? (value in minutes)

   101  # Check interval is hourly

   102

   103  MAILDIR_GC_TIME=7200

   104

   105  # Additional SAN for the certificate

   106  #

   107  # You can use wildcard records to create specific names for every domain you add to mailcow.

   108  # Example: Add domains "example.com" and "example.net" to mailcow, change ADDITIONAL_SAN to a value like:

   109  #ADDITIONAL_SAN=imap.*,smtp.*

   110  # This will expand the certificate to "imap.example.com", "smtp.example.com", "imap.example.net", "smtp.example.net"

   111  # plus every domain you add in the future.

   112  #

   113  # You can also just add static names...

   114  #ADDITIONAL_SAN=srv1.example.net

   115  # ...or combine wildcard and static names:

   116  #ADDITIONAL_SAN=imap.*,srv1.example.com

   117  #

   118

   119  ADDITIONAL_SAN=

   120

   121  # Obtain certificates for autodiscover.* and autoconfig.* domains.

   122  # This can be useful to switch off in case you are in a scenario where a reverse proxy already handles those.

   123  # There are mixed scenarios where ports 80,443 are occupied and you do not want to share certs

   124  # between services. So acme-mailcow obtains for maildomains and all web-things get handled

   125  # in the reverse proxy.

   126  AUTODISCOVER_SAN=y

   127

   128  # Additional server names for mailcow UI

   129  #

   130  # Specify alternative addresses for the mailcow UI to respond to

   131  # This is useful when you set mail.* as ADDITIONAL_SAN and want to make sure mail.maildomain.com will always point to the mailcow UI.

   132  # If the server name does not match a known site, Nginx decides by best-guess and may redirect users to the wrong web root.

   133  # You can understand this as server_name directive in Nginx.

   134  # Comma separated list without spaces! Example: ADDITIONAL_SERVER_NAMES=a.b.c,d.e.f

   135

   136  ADDITIONAL_SERVER_NAMES=

   137

   138  # Skip running ACME (acme-mailcow, Let's Encrypt certs) - y/n

   139

   140  SKIP_LETS_ENCRYPT=y

   141

   142  # Create seperate certificates for all domains - y/n

   143  # this will allow adding more than 100 domains, but some email clients will not be able to connect with alternative hostnames

   144  # see https://doc.dovecot.org/admin_manual/ssl/sni_support

   145  ENABLE_SSL_SNI=n

   146

   147  # Skip IPv4 check in ACME container - y/n

   148

   149  SKIP_IP_CHECK=y

   150

   151  # Skip HTTP verification in ACME container - y/n

   152

   153  SKIP_HTTP_VERIFICATION=y

   154

   155  # Skip Unbound (DNS Resolver) Healthchecks (NOT Recommended!) - y/n

   156

   157  SKIP_UNBOUND_HEALTHCHECK=y

   158

   159  # Skip ClamAV (clamd-mailcow) anti-virus (Rspamd will auto-detect a missing ClamAV container) - y/n

   160

   161  SKIP_CLAMD=n

   162

   163  # Skip Olefy (olefy-mailcow) anti-virus for Office documents (Rspamd will auto-detect a missing Olefy container) - y/n

   164

   165  SKIP_OLEFY=n

   166

   167  # Skip SOGo: Will disable SOGo integration and therefore webmail, DAV protocols and ActiveSync support (experimental, unsupported, not fully implemented) - y/n

   168

   169  SKIP_SOGO=n

   170

   171  # Skip FTS (Fulltext Search) for Dovecot on low-memory, low-threaded systems or if you simply want to disable it.

   172  # Dovecot inside mailcow use Flatcurve as FTS Backend.

   173

   174  SKIP_FTS=n

   175

   176  # Dovecot Indexing (FTS) Process maximum heap size in MB, there is no recommendation, please see Dovecot docs.

   177  # Flatcurve (Xapian backend) is used as the FTS Indexer. It is supposed to be efficient in CPU and RAM consumption.

   178  # However: Please always monitor your Resource consumption!

   179

   180  FTS_HEAP=128

   181

   182  # Controls how many processes the Dovecot indexing process can spawn at max.

   183  # Too many indexing processes can use a lot of CPU and Disk I/O.

   184  # Please visit: https://doc.dovecot.org/configuration_manual/service_configuration/#indexer-worker for more informations

   185

   186  FTS_PROCS=1

   187

   188  # Allow admins to log into SOGo as email user (without any password)

   189

   190  ALLOW_ADMIN_EMAIL_LOGIN=n

   191

   192  # Enable watchdog (watchdog-mailcow) to restart unhealthy containers

   193

   194  USE_WATCHDOG=y

   195

   196  # Send watchdog notifications by mail (sent from watchdog@MAILCOW_HOSTNAME)

   197  # CAUTION:

   198  # 1. You should use external recipients

   199  # 2. Mails are sent unsigned (no DKIM)

   200  # 3. If you use DMARC, create a separate DMARC policy ("v=DMARC1; p=none;" in _dmarc.MAILCOW_HOSTNAME)

   201  # Multiple rcpts allowed, NO quotation marks, NO spaces

   202

   203  #WATCHDOG_NOTIFY_EMAIL=a@example.com,b@example.com,c@example.com

   204  #WATCHDOG_NOTIFY_EMAIL=

   205

   206  # Send notifications to a webhook URL that receives a POST request with the content type "application/json".

   207  # You can use this to send notifications to services like Discord, Slack and others.

   208  #WATCHDOG_NOTIFY_WEBHOOK=https://discord.com/api/webhooks/XXXXXXXXXXXXXXXXXXX/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

   209  # JSON body included in the webhook POST request. Needs to be in single quotes.

   210  # Following variables are available: SUBJECT, BODY

   211  #WATCHDOG_NOTIFY_WEBHOOK_BODY='{"username": "mailcow Watchdog", "content": "****\n"}'

   212

   213  # Notify about banned IP (includes whois lookup)

   214  WATCHDOG_NOTIFY_BAN=n

   215

   216  # Send a notification when the watchdog is started.

  217  WATCHDOG_NOTIFY_START=y

   218

   219  # Subject for watchdog mails. Defaults to "Watchdog ALERT" followed by the error message.

   220  #WATCHDOG_SUBJECT=

   221

   222  # Checks if mailcow is an open relay. Requires a SAL. More checks will follow.

   223  # https://www.servercow.de/mailcow?lang=en

   224  # https://www.servercow.de/mailcow?lang=de

   225  # No data is collected. Opt-in and anonymous.

   226  # Will only work with unmodified mailcow setups.

   227  WATCHDOG_EXTERNAL_CHECKS=n

   228

   229  # Enable watchdog verbose logging

   230  WATCHDOG_VERBOSE=n

   231

   232  # Max log lines per service to keep in Redis logs

   233

   234  LOG_LINES=9999

   235

   236  # Internal IPv4 /24 subnet, format n.n.n (expands to n.n.n.0/24)

   237  # Use private IPv4 addresses only, see https://en.wikipedia.org/wiki/Private_network#Private_IPv4_addresses

   238

   239  IPV4_NETWORK=172.22.1

   240

   241  # Internal IPv6 subnet in fc00::/7

   242  # Use private IPv6 addresses only, see https://en.wikipedia.org/wiki/Private_network#Private_IPv6_addresses

   243

   244  IPV6_NETWORK=fd4d:6169:6c63:6f77::/64

   245

   246  # Use this IPv4 for outgoing connections (SNAT)

   247

   248  #SNAT_TO_SOURCE=

   249

   250  # Use this IPv6 for outgoing connections (SNAT)

   251

   252  #SNAT6_TO_SOURCE=

   253

   254  # Create or override an API key for the web UI

   255  # You _must_ define API_ALLOW_FROM, which is a comma separated list of IPs

   256  # An API key defined as API_KEY has read-write access

   257  # An API key defined as API_KEY_READ_ONLY has read-only access

   258  # Allowed chars for API_KEY and API_KEY_READ_ONLY: a-z, A-Z, 0-9, -

   259  # You can define API_KEY and/or API_KEY_READ_ONLY

   260

   261  #API_KEY=

   262  #API_KEY_READ_ONLY=

   263  #API_ALLOW_FROM=172.22.1.1,127.0.0.1

   264

   265  # mail_home is ~/Maildir

   266  MAILDIR_SUB=Maildir

   267

   268  # SOGo session timeout in minutes

   269  SOGO_EXPIRE_SESSION=480

   270

   271  # DOVECOT_MASTER_USER and DOVECOT_MASTER_PASS must both be provided. No special chars.

   272  # Empty by default to auto-generate master user and password on start.

   273  # User expands to DOVECOT_MASTER_USER@mailcow.local

   274  # LEAVE EMPTY IF UNSURE

   275  DOVECOT_MASTER_USER=

   276  # LEAVE EMPTY IF UNSURE

   277  DOVECOT_MASTER_PASS=

   278

   279  # WebAuthn device manufacturer verification

   280  # After setting WEBAUTHN_ONLY_TRUSTED_VENDORS=y only devices from trusted manufacturers are allowed

   281  # root certificates can be placed for validation under mailcow-dockerized/data/web/inc/lib/WebAuthn/rootCertificates

   282  WEBAUTHN_ONLY_TRUSTED_VENDORS=n

   283

   284  # Spamhaus Data Query Service Key

   285  # Optional: Leave empty for none

   286  # Enter your key here if you are using a blocked ASN (OVH, AWS, Cloudflare e.g) for the unregistered Spamhaus Blocklist.

   287  # If empty, it will completely disable Spamhaus blocklists if it detects that you are running on a server using a blocked AS.

   288  # Otherwise it will work normally.

   289  SPAMHAUS_DQS_KEY=

   290

   291  # IPv6 Controller Section

   292  # This variable controls the usage of IPv6 within mailcow.

   293  # Can either be true or false | Defaults to true

   294  # WARNING: MAKE SURE TO PROPERLY CONFIGURE IPv6 ON YOUR HOST FIRST BEFORE ENABLING THIS AS FAULTY CONFIGURATIONS CAN LEAD TO OPEN RELAYS!

   295  # A COMPLETE DOCKER STACK REBUILD (compose down && compose up -d) IS NEEDED TO APPLY THIS.

   296  ENABLE_IPV6=false

   297

   298  # Prevent netfilter from setting an iptables/nftables rule to isolate the mailcow docker network - y/n

   299  # CAUTION: Disabling this may expose container ports to other neighbors on the same subnet, even if the ports are bound to localhost

   300  DISABLE_NETFILTER_ISOLATION_RULE=n

 
